name: Deploy Remix App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 21

      - name: Install dependencies
        run: npm install

      - name: Build the app
        run: npm run build

      - name: Debug Secrets (Safe Logging)
        run: |
          echo "Checking if secrets are loaded..."
          echo "SERVER_HOST: ${{ secrets.SERVER_HOST }}"
          echo "SERVER_USER: ${{ secrets.SERVER_USER }}"
          echo "SSH Key Length: $(echo '${{ secrets.SSH_PRIVATE_KEY }}' | wc -c | tr -d ' ') characters"

      - name: Test SSH Connection
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
          chmod 600 ssh_key
          ssh -o StrictHostKeyChecking=no -i ssh_key \
          ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH Connection Successful'"

      - name: Create Deployment Archive
        run: |
          mkdir -p temp_deploy
          rsync -a --exclude=node_modules --exclude=.git --exclude=build ./ temp_deploy/
          tar -czf remix-app.tar.gz -C temp_deploy .

      - name: Transfer Files to Server Using SCP
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
          chmod 600 ssh_key
          scp -o StrictHostKeyChecking=no -i ssh_key \
          remix-app.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: SSH into Server, Deploy App, and Configure SSL
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "🚀 Starting Deployment on Server..."

            echo "📂 Ensuring the deployment directory exists..."
            mkdir -p ~/remix-app

            echo "🔄 Navigating to the deployment directory..."
            cd ~/remix-app

            echo "🛑 Stopping existing containers..."
            echo "${{ secrets.SERVER_SUDO_PASSWORD }}" | sudo -S docker compose down --remove-orphans

            echo "📂 Removing old files (if any)..."
            rm -rf ~/remix-app/*

            echo "📦 Extracting new deployment files into ~/remix-app..."
            tar -xzf ~/remix-app.tar.gz -C ~/remix-app --strip-components=1

            echo "🛠️ Rebuilding and Restarting all services..."
            echo "${{ secrets.SERVER_SUDO_PASSWORD }}" | sudo -S docker compose up -d --build --remove-orphans

            echo "🔍 Checking if SSL is already installed for Nginx..."
            if [ ! -f /etc/letsencrypt/live/gstunc.live/fullchain.pem ]; then
              echo "⚠️ SSL certificate not found! Installing Certbot and generating SSL..."
              
              # Install Certbot if not installed
              echo "${{ secrets.SERVER_SUDO_PASSWORD }}" | sudo -S apt update
              echo "${{ secrets.SERVER_SUDO_PASSWORD }}" | sudo -S apt install -y certbot python3-certbot-nginx

              # Generate SSL certificate
              echo "${{ secrets.SERVER_SUDO_PASSWORD }}" | sudo -S certbot --nginx -d gstunc.live --non-interactive --agree-tos -m admin@gstunc.live --redirect

              echo "✅ SSL certificate successfully generated!"
            else
              echo "✅ SSL certificate already exists. Skipping generation."
            fi

            echo "🔄 Restarting Nginx to apply changes..."
            echo "${{ secrets.SERVER_SUDO_PASSWORD }}" | sudo -S systemctl restart nginx

            echo "✅ Deployment & SSL Setup Successful!"
